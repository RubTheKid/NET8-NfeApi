// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nfe.Infrastructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Nfe.Infrastructure.Migrations
{
    [DbContext(typeof(NfeDbContext))]
    [Migration("20250701211245_SeedNotaFiscal")]
    partial class SeedNotaFiscal
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Nfe.Domain.Entities.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("InscricaoEstadual")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            DataCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "emitente@empresa.com",
                            InscricaoEstadual = "123456789",
                            NomeFantasia = "Emitente Tech",
                            RazaoSocial = "Empresa Emitente LTDA",
                            Telefone = "11987654321"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            DataCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "destinatario@cliente.com",
                            InscricaoEstadual = "987654321",
                            NomeFantasia = "Destinatário Corp",
                            RazaoSocial = "Cliente Destinatário LTDA",
                            Telefone = "11912345678"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            DataCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "contato@abcdist.com",
                            InscricaoEstadual = "555666777",
                            NomeFantasia = "ABC Distribuição",
                            RazaoSocial = "Distribuidora ABC S/A",
                            Telefone = "11999888777"
                        });
                });

            modelBuilder.Entity("Nfe.Domain.Entities.ItemNfe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Cfop")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<string>("Cst")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<Guid>("NotaFiscalId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProdutoId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantidade")
                        .HasPrecision(18, 4)
                        .HasColumnType("numeric(18,4)");

                    b.Property<int>("Sequencia")
                        .HasColumnType("integer");

                    b.Property<decimal>("ValorCofins")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("ValorIcms")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("ValorIpi")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("ValorPis")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("ValorTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("ValorUnitario")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("NotaFiscalId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("ItensNfe");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1111111-1111-1111-1111-111111111111"),
                            Cfop = "5102",
                            Cst = "00",
                            NotaFiscalId = new Guid("f1111111-1111-1111-1111-111111111111"),
                            ProdutoId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Quantidade = 1.00m,
                            Sequencia = 1,
                            ValorCofins = 190.00m,
                            ValorIcms = 450.00m,
                            ValorIpi = 125.00m,
                            ValorPis = 41.25m,
                            ValorTotal = 2500.00m,
                            ValorUnitario = 2500.00m
                        },
                        new
                        {
                            Id = new Guid("b2222222-2222-2222-2222-222222222222"),
                            Cfop = "5102",
                            Cst = "00",
                            NotaFiscalId = new Guid("f1111111-1111-1111-1111-111111111111"),
                            ProdutoId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            Quantidade = 1.00m,
                            Sequencia = 2,
                            ValorCofins = 53.20m,
                            ValorIcms = 126.00m,
                            ValorIpi = 35.00m,
                            ValorPis = 11.55m,
                            ValorTotal = 700.00m,
                            ValorUnitario = 700.00m
                        },
                        new
                        {
                            Id = new Guid("c3333333-3333-3333-3333-333333333333"),
                            Cfop = "5102",
                            Cst = "00",
                            NotaFiscalId = new Guid("f2222222-2222-2222-2222-222222222222"),
                            ProdutoId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Quantidade = 1.00m,
                            Sequencia = 1,
                            ValorCofins = 26.60m,
                            ValorIcms = 63.00m,
                            ValorIpi = 17.50m,
                            ValorPis = 5.78m,
                            ValorTotal = 350.00m,
                            ValorUnitario = 350.00m
                        },
                        new
                        {
                            Id = new Guid("d4444444-4444-4444-4444-444444444444"),
                            Cfop = "5102",
                            Cst = "00",
                            NotaFiscalId = new Guid("f2222222-2222-2222-2222-222222222222"),
                            ProdutoId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            Quantidade = 1.00m,
                            Sequencia = 2,
                            ValorCofins = 34.20m,
                            ValorIcms = 81.00m,
                            ValorIpi = 22.50m,
                            ValorPis = 7.43m,
                            ValorTotal = 450.00m,
                            ValorUnitario = 450.00m
                        },
                        new
                        {
                            Id = new Guid("e5555555-5555-5555-5555-555555555555"),
                            Cfop = "5102",
                            Cst = "00",
                            NotaFiscalId = new Guid("f2222222-2222-2222-2222-222222222222"),
                            ProdutoId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            Quantidade = 1.00m,
                            Sequencia = 3,
                            ValorCofins = 2.66m,
                            ValorIcms = 6.30m,
                            ValorIpi = 1.75m,
                            ValorPis = 0.58m,
                            ValorTotal = 35.00m,
                            ValorUnitario = 35.00m
                        });
                });

            modelBuilder.Entity("Nfe.Domain.Entities.NotaFiscal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ChaveAcesso")
                        .IsRequired()
                        .HasMaxLength(44)
                        .HasColumnType("character varying(44)");

                    b.Property<DateTime?>("DataAutorizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataEmissao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DestinatarioId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmitenteId")
                        .HasColumnType("uuid");

                    b.Property<string>("MotivoRejeicao")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("NumeroNota")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ProtocoloAutorizacao")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Serie")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("ValorCofins")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("ValorIcms")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("ValorIpi")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("ValorPis")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("ValorTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("XmlNFe")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DestinatarioId");

                    b.HasIndex("EmitenteId");

                    b.ToTable("NotasFiscais");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1111111-1111-1111-1111-111111111111"),
                            ChaveAcesso = "35240112345678000123550010000000011234567890",
                            DataAutorizacao = new DateTime(2024, 1, 15, 10, 31, 0, 0, DateTimeKind.Utc),
                            DataCriacao = new DateTime(2024, 1, 15, 10, 30, 0, 0, DateTimeKind.Utc),
                            DataEmissao = new DateTime(2024, 1, 15, 10, 30, 0, 0, DateTimeKind.Utc),
                            DestinatarioId = new Guid("22222222-2222-2222-2222-222222222222"),
                            EmitenteId = new Guid("11111111-1111-1111-1111-111111111111"),
                            NumeroNota = "000000001",
                            ProtocoloAutorizacao = "135240000012345",
                            Serie = "1",
                            Status = 2,
                            ValorCofins = 243.20m,
                            ValorIcms = 576.00m,
                            ValorIpi = 160.00m,
                            ValorPis = 52.80m,
                            ValorTotal = 3200.00m,
                            XmlNFe = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><nfeProc versao=\"4.00\"><NFe><infNFe Id=\"NFe35240112345678000123550010000000011234567890\"></infNFe></NFe></nfeProc>"
                        },
                        new
                        {
                            Id = new Guid("f2222222-2222-2222-2222-222222222222"),
                            ChaveAcesso = "35240112345678000123550010000000021234567890",
                            DataCriacao = new DateTime(2024, 1, 16, 14, 45, 0, 0, DateTimeKind.Utc),
                            DataEmissao = new DateTime(2024, 1, 16, 14, 45, 0, 0, DateTimeKind.Utc),
                            DestinatarioId = new Guid("33333333-3333-3333-3333-333333333333"),
                            EmitenteId = new Guid("11111111-1111-1111-1111-111111111111"),
                            NumeroNota = "000000002",
                            Serie = "1",
                            Status = 1,
                            ValorCofins = 63.46m,
                            ValorIcms = 150.30m,
                            ValorIpi = 41.75m,
                            ValorPis = 13.78m,
                            ValorTotal = 835.00m
                        });
                });

            modelBuilder.Entity("Nfe.Domain.Entities.Produto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<string>("CodigoBarras")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Ncm")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("Peso")
                        .HasPrecision(18, 3)
                        .HasColumnType("numeric(18,3)");

                    b.Property<decimal>("Preco")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("UnidadeMedida")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.ToTable("Produtos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Ativo = true,
                            CodigoBarras = "7891234567890",
                            DataCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Descricao = "Notebook Dell Inspiron 15 3000, Intel Core i5, 8GB RAM, 256GB SSD",
                            Ncm = "84713012",
                            Nome = "Notebook Dell Inspiron",
                            Peso = 2.1m,
                            Preco = 2500.00m,
                            UnidadeMedida = "UN"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Ativo = true,
                            CodigoBarras = "7891234567891",
                            DataCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Descricao = "Mouse Logitech MX Master 3, Wireless, Bluetooth",
                            Ncm = "84716060",
                            Nome = "Mouse Logitech MX",
                            Peso = 0.15m,
                            Preco = 350.00m,
                            UnidadeMedida = "UN"
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            Ativo = true,
                            CodigoBarras = "7891234567892",
                            DataCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Descricao = "Teclado Mecânico RGB, Switch Blue, Layout ABNT2",
                            Ncm = "84716060",
                            Nome = "Teclado Mecânico RGB",
                            Peso = 1.2m,
                            Preco = 450.00m,
                            UnidadeMedida = "UN"
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            Ativo = true,
                            CodigoBarras = "7891234567893",
                            DataCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Descricao = "Monitor LED 24 polegadas, Full HD, HDMI, VGA",
                            Ncm = "85285210",
                            Nome = "Monitor LED 24\"",
                            Peso = 4.5m,
                            Preco = 800.00m,
                            UnidadeMedida = "UN"
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            Ativo = true,
                            CodigoBarras = "7891234567894",
                            DataCriacao = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Descricao = "Cabo HDMI 2.0, 2 metros, 4K, Alta Velocidade",
                            Ncm = "85444200",
                            Nome = "Cabo HDMI 2m",
                            Peso = 0.3m,
                            Preco = 35.00m,
                            UnidadeMedida = "UN"
                        });
                });

            modelBuilder.Entity("Nfe.Domain.Entities.Cliente", b =>
                {
                    b.OwnsOne("Nfe.Domain.ValueObjects.Cnpj", "Cnpj", b1 =>
                        {
                            b1.Property<Guid>("ClienteId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("character varying(14)")
                                .HasColumnName("Cnpj");

                            b1.HasKey("ClienteId");

                            b1.ToTable("Clientes");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");

                            b1.HasData(
                                new
                                {
                                    ClienteId = new Guid("11111111-1111-1111-1111-111111111111"),
                                    Numero = "12345678000123"
                                },
                                new
                                {
                                    ClienteId = new Guid("22222222-2222-2222-2222-222222222222"),
                                    Numero = "98765432000198"
                                },
                                new
                                {
                                    ClienteId = new Guid("33333333-3333-3333-3333-333333333333"),
                                    Numero = "11222333000144"
                                });
                        });

                    b.OwnsOne("Nfe.Domain.ValueObjects.Endereco", "Endereco", b1 =>
                        {
                            b1.Property<Guid>("ClienteId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Bairro")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("character varying(64)")
                                .HasColumnName("Bairro");

                            b1.Property<string>("Cep")
                                .IsRequired()
                                .HasMaxLength(8)
                                .HasColumnType("character varying(8)")
                                .HasColumnName("Cep");

                            b1.Property<string>("Cidade")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("character varying(64)")
                                .HasColumnName("Cidade");

                            b1.Property<string>("Complemento")
                                .HasMaxLength(64)
                                .HasColumnType("character varying(64)")
                                .HasColumnName("Complemento");

                            b1.Property<string>("Estado")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("character varying(2)")
                                .HasColumnName("Estado");

                            b1.Property<string>("Logradouro")
                                .IsRequired()
                                .HasMaxLength(128)
                                .HasColumnType("character varying(128)")
                                .HasColumnName("Logradouro");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(8)
                                .HasColumnType("character varying(8)")
                                .HasColumnName("NumeroEndereco");

                            b1.Property<string>("Pais")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("character varying(64)")
                                .HasColumnName("Pais");

                            b1.HasKey("ClienteId");

                            b1.ToTable("Clientes");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");

                            b1.HasData(
                                new
                                {
                                    ClienteId = new Guid("11111111-1111-1111-1111-111111111111"),
                                    Bairro = "Centro",
                                    Cep = "01234567",
                                    Cidade = "São Paulo",
                                    Complemento = "Sala 101",
                                    Estado = "SP",
                                    Logradouro = "Rua das Empresas",
                                    Numero = "123",
                                    Pais = "Brasil"
                                },
                                new
                                {
                                    ClienteId = new Guid("22222222-2222-2222-2222-222222222222"),
                                    Bairro = "Vila Nova",
                                    Cep = "87654321",
                                    Cidade = "Rio de Janeiro",
                                    Estado = "RJ",
                                    Logradouro = "Avenida dos Clientes",
                                    Numero = "456",
                                    Pais = "Brasil"
                                },
                                new
                                {
                                    ClienteId = new Guid("33333333-3333-3333-3333-333333333333"),
                                    Bairro = "Industrial",
                                    Cep = "12345678",
                                    Cidade = "Guarulhos",
                                    Complemento = "Galpão A",
                                    Estado = "SP",
                                    Logradouro = "Rua do Comércio",
                                    Numero = "789",
                                    Pais = "Brasil"
                                });
                        });

                    b.Navigation("Cnpj")
                        .IsRequired();

                    b.Navigation("Endereco")
                        .IsRequired();
                });

            modelBuilder.Entity("Nfe.Domain.Entities.ItemNfe", b =>
                {
                    b.HasOne("Nfe.Domain.Entities.NotaFiscal", "NotaFiscal")
                        .WithMany("Itens")
                        .HasForeignKey("NotaFiscalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nfe.Domain.Entities.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotaFiscal");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("Nfe.Domain.Entities.NotaFiscal", b =>
                {
                    b.HasOne("Nfe.Domain.Entities.Cliente", "Destinatario")
                        .WithMany()
                        .HasForeignKey("DestinatarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Nfe.Domain.Entities.Cliente", "Emitente")
                        .WithMany()
                        .HasForeignKey("EmitenteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Destinatario");

                    b.Navigation("Emitente");
                });

            modelBuilder.Entity("Nfe.Domain.Entities.NotaFiscal", b =>
                {
                    b.Navigation("Itens");
                });
#pragma warning restore 612, 618
        }
    }
}
